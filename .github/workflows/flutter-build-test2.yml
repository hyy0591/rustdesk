name: Build the flutter test version of the RustDesk 2

on:
  workflow_call:
    inputs:
      upload-artifact:
        type: boolean
        default: true
      upload-tag:
        type: string
        default: "nightly"

# NOTE: F-Droid builder script 'flutter/build_fdroid.sh' reads environment
# variables from this workflow!
#
# It does NOT read build steps, however, so please fix 'flutter/build_fdroid.sh
# whenever you add changes to Android CI build action ('build-rustdesk-android')
# in this file!

env:
  WIN_RUST_VERSION: "1.75" # https://github.com/rustdesk/rustdesk/discussions/7503, also 1.78 has ABI change which causes our sciter version not working, https://blog.rust-lang.org/2024/03/30/i128-layout-update.html
  RUST_VERSION: "1.75" # sciter failed on m1 with 1.78 because of https://blog.rust-lang.org/2024/03/30/i128-layout-update.html
  CARGO_NDK_VERSION: "3.1.2"
  LLVM_VERSION: "15.0.6"
  FLUTTER_VERSION: "3.19.6"
  ANDROID_FLUTTER_VERSION: "3.13.9" # >= 3.16 is very slow on my android phone, but work well on most of others. We may switch to new flutter after changing to texture rendering (I believe it can solve my problem).
  FLUTTER_RUST_BRIDGE_VERSION: "1.80.1"
  # for arm64 linux because official Dart SDK does not work
  FLUTTER_ELINUX_VERSION: "3.16.9"
  TAG_NAME: "${{ inputs.upload-tag }}"
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  # vcpkg version: 2024.03.25
  VCPKG_COMMIT_ID: "a34c873a9717a888f58dc05268dea15592c2f0ff"
  VERSION: "1.2.6"
  # To make a custom build with your own servers set the below secret values
  RS_PUB_KEY: "${{ secrets.RS_PUB_KEY }}"
  RENDEZVOUS_SERVER: "${{ secrets.RENDEZVOUS_SERVER }}"
  API_SERVER: "${{ secrets.API_SERVER }}"
  UPLOAD_ARTIFACT: "${{ inputs.upload-artifact }}"
  SIGN_BASE_URL: "${{ secrets.SIGN_BASE_URL }}"

jobs:
  generate-bridge-linux:
    uses: ./.github/workflows/bridge.yml

  build-rustdesk-linux:
    needs: [generate-bridge-linux]
    name: build rustdesk linux ${{ matrix.job.target }} 
    runs-on: ${{ matrix.job.on }}
    strategy:
      fail-fast: false
      matrix:
        # use a high level qemu-user-static
        job:
          - {
              arch: x86_64,
              target: x86_64-unknown-linux-gnu,
              distro: ubuntu18.04,
              on: ubuntu-20.04,
              deb_arch: amd64,
              vcpkg-triplet: x64-linux,
            }
          #- {
          #    arch: aarch64,
          #    target: aarch64-unknown-linux-gnu,
          #    distro: ubuntu18.04,
          #    on: ubuntu-20.04,
          #    deb_arch: arm64,
          #    vcpkg-triplet: arm64-linux,
          #  }
    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Maximize build space
        run: |
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet
          sudo apt-get update -y
          sudo apt-get install -y nasm qemu-user-static

      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Add Custom Font Load Code (ARM64)
        if: matrix.job.arch == 'aarch64'
        run: |
          ls /home/runner/work
          ls /home/runner/work/rustdesk
          ls /home/runner/work/rustdesk/rustdesk
          ls /home/runner/work/rustdesk/rustdesk/flutter
          ls /home/runner/work/rustdesk/rustdesk/flutter/lib
          sed -i 's/WidgetsFlutterBinding.ensureInitialized();/WidgetsFlutterBinding.ensureInitialized();\n  final result = await Process.run("fc-match", ["-f", "%{file}"]);\n  if (result.exitCode == 0) {\n    String fontPath = result.stdout.trim();\n    print("Default font path: $fontPath");\n    var fontFile = File(fontPath);\n    if (!fontFile.existsSync()) {\n      print("Font file is not exist");\n    } else {\n      Future<ByteData> readFont() async {\n        ByteData byteData = (await fontFile.readAsBytes()).buffer.asByteData();\n        return byteData;\n      }\n      final fontLoader = FontLoader("SystemDefaultFont");\n      fontLoader.addFont(readFont());\n      await fontLoader.load();\n    }\n  } else {\n    print("Error: ${result.stderr}");\n  }\n/' /home/runner/work/rustdesk/rustdesk/flutter/lib/main.dart
          sed -i 's/useMaterial3: false,/useMaterial3: false,\n    fontFamily: '\''SystemDefaultFont'\'',/' /home/runner/work/rustdesk/rustdesk/flutter/lib/common.dart
          sed -i 's/WorkSans/SystemDefaultFont/' /home/runner/work/rustdesk/rustdesk/flutter/lib/desktop/pages/connection_page.dart
          sed -i 's/WorkSans/SystemDefaultFont/' /home/runner/work/rustdesk/rustdesk/flutter/lib/common/widgets/overlay.dart
          sed -i 's/TextStyle(/TextStyle(fontFamily: '\''SystemDefaultFont'\'',/' /home/runner/work/rustdesk/rustdesk/flutter/lib/common.dart

      - name: Set Swap Space
        if: matrix.job.arch == 'x86_64'
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 12

      - name: Set Swap Space (ARM64)
        if: matrix.job.arch == 'aarch64'
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 30

      - name: Free Space
        run: |
          df -h
          free -m

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        if: matrix.job.arch == 'x86_64' || env.UPLOAD_ARTIFACT == 'true'
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.job.target }}
          components: "rustfmt"

      - name: Save Rust toolchain version
        run: |
          RUST_TOOLCHAIN_VERSION=$(cargo --version | awk '{print $2}')
          echo "RUST_TOOLCHAIN_VERSION=$RUST_TOOLCHAIN_VERSION" >> $GITHUB_ENV

      - name: Disable rust bridge build
        run: |
          # only build cdylib
          sed -i  "s/\[\"cdylib\", \"staticlib\", \"rlib\"\]/\[\"cdylib\"\]/g" Cargo.toml

      - name: Restore bridge files
        if: matrix.job.arch == 'x86_64' || env.UPLOAD_ARTIFACT == 'true'
        uses: actions/download-artifact@master
        with:
          name: bridge-artifact
          path: ./

      - name: Setup vcpkg with Github Actions binary cache
        if: matrix.job.arch == 'x86_64' || env.UPLOAD_ARTIFACT == 'true'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: /opt/artifacts/vcpkg
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}

      - name: Install aarch64 toolchain
        if: matrix.job.arch == 'aarch64'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          mkdir /tmp/custom-triplets
          echo "set(VCPKG_TARGET_ARCHITECTURE arm64)" > /tmp/custom-triplets/arm64-linux.cmake
          echo "set(VCPKG_CRT_LINKAGE dynamic)" >> /tmp/custom-triplets/arm64-linux.cmake
          echo "set(VCPKG_LIBRARY_LINKAGE static)" >> /tmp/custom-triplets/arm64-linux.cmake
          echo "set(VCPKG_CMAKE_SYSTEM_NAME Linux)" >> /tmp/custom-triplets/arm64-linux.cmake
          echo "set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)" >> /tmp/custom-triplets/arm64-linux.cmake
          echo "set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)" >> /tmp/custom-triplets/arm64-linux.cmake
          echo "set(CMAKE_LINKER aarch64-linux-gnu-ld)" >> /tmp/custom-triplets/arm64-linux.cmake
          echo "set(CMAKE_AR aarch64-linux-gnu-ar)" >> /tmp/custom-triplets/arm64-linux.cmake
          echo "set(CMAKE_NM aarch64-linux-gnu-nm)" >> /tmp/custom-triplets/arm64-linux.cmake
          echo "set(CMAKE_OBJCOPY aarch64-linux-gnu-objcopy)" >> /tmp/custom-triplets/arm64-linux.cmake
          echo "set(CMAKE_OBJDUMP aarch64-linux-gnu-objdump)" >> /tmp/custom-triplets/arm64-linux.cmake
          echo "set(CMAKE_RANLIB aarch64-linux-gnu-ranlib)" >> /tmp/custom-triplets/arm64-linux.cmake
        shell: bash

      - name: Install vcpkg dependencies (ARM64)
        if: matrix.job.arch == 'aarch64'
        run: |
          $VCPKG_ROOT/vcpkg install --triplet ${{ matrix.job.vcpkg-triplet }} --x-install-root="$VCPKG_ROOT/installed" --overlay-triplets=/tmp/custom-triplets
        shell: bash

      - name: Install vcpkg dependencies
        if: matrix.job.arch == 'x86_64'
        run: |
          $VCPKG_ROOT/vcpkg install --triplet ${{ matrix.job.vcpkg-triplet }} --x-install-root="$VCPKG_ROOT/installed"
        shell: bash

      - name: Restore bridge files
        if: matrix.job.arch == 'x86_64' || env.UPLOAD_ARTIFACT == 'true'
        uses: actions/download-artifact@master
        with:
          name: bridge-artifact
          path: ./

      - uses: rustdesk-org/run-on-arch-action@amd64-support
        name: Build rustdesk
        id: vcpkg
        if: matrix.job.arch == 'x86_64' || env.UPLOAD_ARTIFACT == 'true'
        with:
          arch: ${{ matrix.job.arch }}
          distro: ${{ matrix.job.distro }}
          githubToken: ${{ github.token }}
          setup: |
            ls -l "${PWD}"
            ls -l /opt/artifacts/vcpkg/installed
          dockerRunArgs: |
            --volume "${PWD}:/workspace"
            --volume "/opt/artifacts:/opt/artifacts"
          shell: /bin/bash
          install: |
            apt-get update -y
            echo -e "installing deps"
            apt-get install -y \
               build-essential \
               clang \
               cmake \
               curl \
               gcc \
               git \
               g++ \
               libappindicator3-dev \
               libasound2-dev \
               libclang-10-dev \
               libgstreamer1.0-dev \
               libgstreamer-plugins-base1.0-dev \
               libgtk-3-dev \
               libpam0g-dev \
               libpulse-dev \
               libva-dev \
               libvdpau-dev \
               libxcb-randr0-dev \
               libxcb-shape0-dev \
               libxcb-xfixes0-dev \
               libxdo-dev \
               libxfixes-dev \
               llvm-10-dev \
               nasm \
               ninja-build \
               pkg-config \
               tree \
               python3 \
               unzip \
               wget \
               xz-utils
            # we have libopus compiled by us.
            apt-get remove -y libopus-dev || true
            # output devs
            ls -l ./
            tree -L 3 /opt/artifacts/vcpkg/installed
          run: |
            # disable git safe.directory
            git config --global --add safe.directory "*"
            # rust
            pushd /opt
            # do not use rustup, because memory overflow in qemu
            wget -O rust.tar.gz https://static.rust-lang.org/dist/rust-${{env.RUST_TOOLCHAIN_VERSION}}-${{ matrix.job.target }}.tar.gz
            tar -zxvf rust.tar.gz > /dev/null && rm rust.tar.gz
            cd rust-${{env.RUST_TOOLCHAIN_VERSION}}-${{ matrix.job.target }} && ./install.sh
            rm -rf rust-${{env.RUST_TOOLCHAIN_VERSION}}-${{ matrix.job.target }}
            # edit config
            mkdir -p ~/.cargo/
            echo """
              [source.crates-io]
              registry = 'https://github.com/rust-lang/crates.io-index'
            """ > ~/.cargo/config
            cat ~/.cargo/config
            # start build
            pushd /workspace
            export VCPKG_ROOT=/opt/artifacts/vcpkg
            if [[ "${{ matrix.job.arch }}" == "aarch64" ]]; then
              export JOBS="--jobs 3"
              export CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse
              echo $CARGO_REGISTRIES_CRATES_IO_PROTOCOL
            else
              export JOBS=""
            fi
            echo $JOBS
            cargo build --lib $JOBS --features hwcodec,flutter --release
            rm -rf target/release/deps target/release/build
            rm -rf ~/.cargo

            # Setup Flutter
            # disable git safe.directory
            git config --global --add safe.directory "*"
            pushd /workspace
            case ${{ matrix.job.arch }} in
              aarch64)
                export PATH=/opt/flutter-elinux/bin:$PATH
                sed -i "s/flutter build linux --release/flutter-elinux build linux --release/g" ./build.py
                sed -i "s/x64\/release/arm64\/release/g" ./build.py
              ;;
              x86_64)
                export PATH=/opt/flutter/bin:$PATH
              ;;
            esac
            popd
            pushd /opt
            wget https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_${{ env.FLUTTER_VERSION }}-stable.tar.xz
            tar xf flutter_linux_${{ env.FLUTTER_VERSION }}-stable.tar.xz
            case ${{ matrix.job.arch }} in
              aarch64)
                # clone repo and reset to flutter ${{ env.FLUTTER_VERSION }}
                git clone https://github.com/sony/flutter-elinux.git || true
                pushd flutter-elinux
                  git fetch
                  git reset --hard ${{ env.FLUTTER_VERSION }}
                  bin/flutter-elinux doctor -v
                  bin/flutter-elinux precache --linux
                popd
                cp -R flutter/bin/cache/artifacts/engine/linux-x64/shader_lib flutter-elinux/flutter/bin/cache/artifacts/engine/linux-arm64
                rm -rf flutter
              ;;
              x86_64)
                flutter doctor -v
              ;;
            esac

            # build flutter
            pushd /workspace
            export CARGO_INCREMENTAL=0
            export DEB_ARCH=${{ matrix.job.deb_arch }}
            python3 ./build.py --flutter --skip-cargo
            for name in rustdesk*??.deb; do
              mv "$name" "${name%%.deb}-${{ matrix.job.arch }}.deb"
            done

      - name: Upload deb 
        uses: actions/upload-artifact@master
        if: env.UPLOAD_ARTIFACT == 'true'
        with:
          name: rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.deb
          path: rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.deb

  build-rustdesk-linux-sciter:
    if: ${{ inputs.upload-artifact }}
    #needs: build-rustdesk-linux # not for dep, just make it run later for parallelism
    runs-on: ubuntu-20.04
    name: build-rustdesk-sciter-${{ matrix.job.target }}
    strategy:
      fail-fast: false
      matrix:
        # use a high level qemu-user-static
        job:
          - {
              arch: x86_64,
              target: x86_64-unknown-linux-gnu,
              deb_arch: amd64,
              vcpkg-triplet: x64-linux,
              use-cross: false
            }
          #- {
          #    arch: aarch64,
          #    target: aarch64-unknown-linux-gnu,
          #    deb_arch: arm64,
          #    vcpkg-triplet: arm64-linux,
          #    use-cross: true
          #  }
    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Maximize build space
        run: |
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet
          sudo apt-get update -y
          sudo apt-get install -y nasm qemu-user-static

      - name: Set Swap Space (ARM64)
        if: matrix.job.arch == 'aarch64'
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 21

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
               cmake \
               curl \
               g++ \
               gcc \
               git \
               nasm \
               ninja-build \
               pkg-config \
               unzip \
               xz-utils \
               zip

      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Free Space
        run: |
          df -h
          free -m

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.job.target }}
          components: "rustfmt"

      - name: Save Rust toolchain version
        run: |
          RUST_TOOLCHAIN_VERSION=$(cargo --version | awk '{print $2}')
          echo "RUST_TOOLCHAIN_VERSION=$RUST_TOOLCHAIN_VERSION" >> $GITHUB_ENV

      - name: Setup vcpkg with Github Actions binary cache
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: /opt/artifacts/vcpkg
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}

      - name: Install aarch64 toolchain
        if: matrix.job.arch == 'aarch64'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y crossbuild-essential-arm64
        shell: bash

      - name: Install vcpkg dependencies
        run: |
          cp $PWD/res/vcpkg/linux.cmake $VCPKG_ROOT/scripts/toolchains/linux.cmake
          $VCPKG_ROOT/vcpkg install --triplet ${{ matrix.job.vcpkg-triplet }} --x-install-root="$VCPKG_ROOT/installed"
        shell: bash

      - uses: rustdesk-org/run-on-arch-action@amd64-support
        name: Build rustdesk sciter binary for ${{ matrix.job.arch }}
        id: vcpkg
        with:
          arch: ${{ matrix.job.arch }}
          distro: ubuntu18.04-rustdesk
          githubToken: ${{ github.token }}
          setup: |
            ls -l "${PWD}"
          dockerRunArgs: |
            --volume "${PWD}:/workspace"
            --volume "/opt/artifacts:/opt/artifacts"
          shell: /bin/bash
          install: |
            apt-get update -y
            apt-get install -y \
               build-essential \
               clang \
               cmake \
               curl \
               gcc \
               git \
               g++ \
               libappindicator3-dev \
               libasound2-dev \
               libclang-dev \
               libdbus-1-dev \
               libglib2.0-dev \
               libgstreamer1.0-dev \
               libgstreamer-plugins-base1.0-dev \
               libgtk-3-dev \
               liblzma-dev \
               libpam0g-dev \
               libpulse-dev \
               libva-dev \
               libvdpau-dev \
               libxcb-randr0-dev \
               libxcb-shape0-dev \
               libxcb-xfixes0-dev \
               libxdo-dev \
               libxfixes-dev \
               nasm \
               ninja-build \
               pkg-config \
               python3 \
               rpm \
               unzip \
               wget \
               xz-utils
          run: |
            # disable git safe.directory
            git config --global --add safe.directory "*"
            # rust
            pushd /opt
            # do not use rustup, because memory overflow in qemu
            wget -O rust.tar.gz https://static.rust-lang.org/dist/rust-${{env.RUST_TOOLCHAIN_VERSION}}-${{ matrix.job.target }}.tar.gz
            tar -zxvf rust.tar.gz > /dev/null && rm rust.tar.gz
            cd rust-${{env.RUST_TOOLCHAIN_VERSION}}-${{ matrix.job.target }} && ./install.sh
            rm -rf rust-${{env.RUST_TOOLCHAIN_VERSION}}-${{ matrix.job.target }}
            # edit config
            mkdir -p ~/.cargo/
            echo """
              [source.crates-io]
              registry = 'https://github.com/rust-lang/crates.io-index'
            """ > ~/.cargo/config

            cat ~/.cargo/config
            if [[ "${{ matrix.job.arch }}" == "aarch64" ]]; then
              export JOBS="--jobs 4"
              export CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse
              echo $CARGO_REGISTRIES_CRATES_IO_PROTOCOL
            else
              export JOBS="--jobs 1"
            fi
            echo $JOBS

            # build
            pushd /workspace
            python3 ./res/inline-sciter.py
            export VCPKG_ROOT=/opt/artifacts/vcpkg
            export ARCH=${{ matrix.job.arch }}
            export CARGO_INCREMENTAL=0
            cargo build $JOBS --features inline --release --bins
            # package
            mkdir -p ./Release
            mv ./target/release/cscpassist ./Release/cscpassist
            wget -O ./Release/libsciter-gtk.so https://github.com/c-smile/sciter-sdk/raw/master/bin.lnx/arm64/libsciter-gtk.so
            ./build.py --package ./Release

      - name: Rename rustdesk
        shell: bash
        run: |
          for name in rustdesk*??.deb; do
              # use cp to duplicate deb files to fit other packages.
              cp "$name" "${name%%.deb}-${{ matrix.job.arch }}-sciter.deb"
          done

      - name: Upload deb 
        uses: actions/upload-artifact@master
        if: env.UPLOAD_ARTIFACT == 'true'
        with:
          name: rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}-sciter.deb
          path: rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}-sciter.deb

  build-appimage:
    name: Build appimage ${{ matrix.job.target }}
    needs: [build-rustdesk-linux, build-rustdesk-linux-sciter]
    runs-on: ubuntu-20.04
    if: ${{ inputs.upload-artifact }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              target: x86_64-unknown-linux-gnu,
              arch: x86_64,
              type: flutter
            }
          - {
              target: aarch64-unknown-linux-gnu,
              arch: aarch64,
              type: flutter
            }
          - {
              target: x86_64-unknown-linux-gnu,
              arch: x86_64,
              type: sciter
            }
          - {
              target: aarch64-unknown-linux-gnu,
              arch: aarch64,
              type: sciter
            }
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Download Binary
        if: matrix.job.type != 'sciter'
        uses: actions/download-artifact@master
        with:
          name: rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.deb
          path: .

      - name: Download Binary (Sciter)
        if: matrix.job.type == 'sciter'
        uses: actions/download-artifact@master
        with:
          name: rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}-sciter.deb
          path: .

      - name: Rename Binary
        if: matrix.job.type != 'sciter'
        run: |
          mv rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.deb appimage/rustdesk.deb

      - name: Rename Binary (Sciter)
        if: matrix.job.type == 'sciter'
        run: |
          mv rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}-sciter.deb appimage/rustdesk.deb

      - name: Build appimage package
        if: matrix.job.type != 'sciter'
        shell: bash
        run: |
          # install libarchive-tools for bsdtar command used in AppImageBuilder.yml
          sudo apt-get update -y
          sudo apt-get install -y libarchive-tools
          sudo apt install -y binutils coreutils desktop-file-utils fakeroot fuse libgdk-pixbuf2.0-dev patchelf python3-pip python3-setuptools squashfs-tools strace util-linux zsync
          # set-up appimage-builder
          #pushd /tmp
          #wget -O appimage-builder-x86_64.AppImage https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage
          #chmod +x appimage-builder-x86_64.AppImage
          #sudo mv appimage-builder-x86_64.AppImage /usr/local/bin/appimage-builder
          #popd
          sudo pip3 install testresources
          sudo pip3 install requests -U
          sudo pip3 install urllib3 -U
          sudo pip3 install git+https://github.com/AppImageCrafters/appimage-builder.git@f38699ef3644fa5409a5a262b7b6d99d6fb85db9
          # run appimage-builder
          pushd appimage
          sudo appimage-builder --skip-tests --recipe ./AppImageBuilder-${{ matrix.job.arch }}.yml
        continue-on-error: true

      - name: Build appimage package (Sciter)
        if: matrix.job.type == 'sciter'
        shell: bash
        run: |
          # install libarchive-tools for bsdtar command used in AppImageBuilder.yml
          sudo apt-get update -y
          sudo apt-get install -y libarchive-tools
          sudo apt install -y binutils coreutils desktop-file-utils fakeroot fuse libgdk-pixbuf2.0-dev patchelf python3-pip python3-setuptools squashfs-tools strace util-linux zsync
          # set-up appimage-builder
          #pushd /tmp
          #wget -O appimage-builder-x86_64.AppImage https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage
          #chmod +x appimage-builder-x86_64.AppImage
          #sudo mv appimage-builder-x86_64.AppImage /usr/local/bin/appimage-builder
          #popd
          sudo pip3 install testresources
          sudo pip3 install requests -U
          sudo pip3 install urllib3 -U
          sudo pip3 install git+https://github.com/AppImageCrafters/appimage-builder.git@f38699ef3644fa5409a5a262b7b6d99d6fb85db9
          # run appimage-builder
          pushd appimage
          sudo appimage-builder --skip-tests --recipe ./AppImageBuilder-${{ matrix.job.arch }}.yml
          mv ./cscpassist-${{ env.VERSION }}-${{ matrix.job.arch }}.AppImage ./cscpassist-${{ env.VERSION }}-${{ matrix.job.arch }}-sciter.AppImage
        continue-on-error: true

      - name: Setup Debug Session
        uses: csexton/debugger-action@master

      - name: Upload AppImage
        if: env.UPLOAD_ARTIFACT == 'true' && matrix.job.type != 'sciter'
        uses: actions/upload-artifact@master
        with:
          name: rustdesk-unsigned-linux-APPIMAGE-${{ matrix.job.arch }}
          path: ./appimage/cscpassist-${{ env.VERSION }}-${{ matrix.job.arch }}.AppImage

      - name: Upload AppImage (Sciter)
        if: env.UPLOAD_ARTIFACT == 'true' && matrix.job.type == 'sciter'
        uses: actions/upload-artifact@master
        with:
          name: rustdesk-unsigned-linux-APPIMAGE-${{ matrix.job.arch }}
          path: ./appimage/cscpassist-${{ env.VERSION }}-${{ matrix.job.arch }}-sciter.AppImage
